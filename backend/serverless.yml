service: scholar
provider:
  name: aws
  region: ${opt:region, 'eu-west-2'}
  logRetentionInDays: 30
  timeout: 8
  runtime: nodejs12.x
  memorySize: 128mb
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/scholar-*"
    - Effect: Allow
      Action:
        - s3:GetObject
        - s3:PutObject
      Resource:
        Fn::GetAtt:
          - SnapshotBucket
          - Arn
  environment:
    JWT_SIGNING_SECRET: ${env:JWT_SIGNING_SECRET}
    TEAMS_TABLE: ${env:TEAMS_TABLE}
    USERS_TABLE: ${env:USERS_TABLE}
    AUTH_CACHE_TABLE: ${env:AUTH_CACHE_TABLE}
    SNAPSHOTS_TABLE: ${env:SNAPSHOTS_TABLE}
    API_URL: ${env:API_URL}
    S3_BUCKET: ${env:S3_BUCKET}

functions:
  dashboard-stats:
    handler: modules/stats/info.handler
    events:
      - http:
          path: stats
          method: get
  new-snapshot:
    handler: modules/snapshots/new.handler
    events:
      - http:
          path: snapshot
          method: post
          private: true
  list-snapshots:
    handler: modules/snapshots/list.handler
    events:
      - http:
          path: snapshots
          method: get
  get-snapshot:
    handler: modules/snapshots/get.handler
    events:
      - http:
          path: snapshots/{id}
          method: get
  list-candidates:
    handler: modules/candidates/list.handler
    events:
      - http:
          path: snapshots/{id}/candidates
          method: get
  approve-candidate:
    handler: modules/candidates/approve.handler
    events:
      - http:
          path: candidate/{id}/approve
          method: post
  auth-signin:
    handler: modules/auth/signin.handler
    events:
      - http:
          path: auth/{provider}
          method: get
    environment:
      AUTH_GITHUB_SECRET: ${env:AUTH_GITHUB_SECRET}
      AUTH_GOOGLE_SECRET: ${env:AUTH_GOOGLE_SECRET}
  auth-callback:
    handler: modules/auth/callback.handler
    events:
      - http:
          path: auth/{provider}/callback
          method: get
    environment:
      AUTH_GITHUB_SECRET: ${env:AUTH_GITHUB_SECRET}
      AUTH_GOOGLE_SECRET: ${env:AUTH_GOOGLE_SECRET}
  fetch-profile:
    handler: modules/profile/fetch.handler
    events:
      - http:
          path: profile
          method: get
resources:
   - Resources: ${file(resources/dynamodb.yml)}
   - Resources: ${file(resources/s3.yml)}
   - Resources: ${file(resources/usageplans.yml)}

plugins:
  - serverless-plugin-optimize
  - serverless-s3-local
  - serverless-dynamodb-local
  - serverless-offline

package:
  individually: true

custom:
  dotenv:
    basePath: ../
  s3:
    port: 8080
    directory: ./offline/s3/
  dynamodb:
    stages:
      - ${self:provider.stage}
    start:
      port: 8000
      inMemory: true
      migrate: true
      seed: true
    seed:
      domain:
        sources:
          - table: ${env:SNAPSHOTS_TABLE}
            sources: [./offline/seed/snapshots.json]
          - table: ${env:TEAMS_TABLE}
            sources: [./offline/seed/teams.json]
          - table: ${env:TEAM_KEYS_TABLE}
            sources: [./offline/seed/team_keys.json]
          - table: ${env:USERS_TABLE}
            sources: [./offline/seed/users.json]
