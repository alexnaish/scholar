service: scholar
provider:
  name: aws
  runtime: nodejs12.x
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/snapshots"
    - Effect: Allow
      Action:
        - s3:GetObject
        - s3:PutObject
      Resource: "arn:aws:s3:::${env:S3_BUCKET}/*"

functions:
  dashboard-stats:
    handler: modules/stats/info.handler
    events:
      - http:
          path: stats
          method: get
          cors: true
  list-snapshots:
    handler: modules/snapshots/list.handler
    events:
      - http:
          path: snapshots
          method: get
          cors: true
  get-snapshot:
    handler: modules/snapshots/get.handler
    events:
      - http:
          path: snapshots/{id}
          method: get
          cors: true
  auth-signin:
    handler: modules/auth/signin.handler
    events:
      - http:
          path: auth/{provider}
          method: get
  auth-callback:
    handler: modules/auth/callback.handler
    events:
      - http:
          path: auth/{provider}/callback
          method: get

resources:
   - Resources: ${file(resources/dynamodb.yml)}
   - Resources: ${file(resources/s3.yml)}

plugins:
  - serverless-dotenv-plugin
  - serverless-offline
  - serverless-plugin-optimize
  - serverless-dynamodb-local
  # - serverless-s3-local

custom:
  dotenv:
    basePath: ../
  s3:
    port: 8000
    directory: ./offline/s3/
  dynamodb:
    stages:
      - ${self:provider.stage}
    start:
      port: 8000
      inMemory: true
      migrate: true
      seed: true
    seed:
      domain:
        sources:
          - table: ${env:SNAPSHOTS_TABLE}
            sources: [./offline/seed/snapshots.json]
          - table: ${env:TEAMS_TABLE}
            sources: [./offline/seed/teams.json]
          - table: ${env:USERS_TABLE}
            sources: [./offline/seed/users.json]
